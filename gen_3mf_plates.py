#!/usr/bin/python3
#
#
# Generated by Grok v3 because I hated all my project plates having the same
# name on the printer SD card. 
#
import zipfile
import os
import shutil
import xml.etree.ElementTree as ET
import sys
from pathlib import Path

def extract_plate_names(config_file):
    """
    Extract plate names from Metadata/model_settings.config using <plate><metadata key="plater_name">.
    Returns a list of plate names in order, only for plates with a plater_name.
    """
    plate_names = []
    try:
        tree = ET.parse(config_file)
        root = tree.getroot()
        for plate in root.findall(".//plate"):
            for meta in plate.findall("./metadata"):
                if meta.get('key') == 'plater_name' and meta.get('value'):
                    plate_names.append(meta.get('value'))
        if not plate_names:
            print("Warning: No plates with plater_name found in model_settings.config")
        return plate_names
    except ET.ParseError:
        print(f"Error: Invalid XML in {config_file}")
        return []
    except Exception as e:
        print(f"Error reading {config_file}: {e}")
        return []

def modify_3mf_metadata(input_3mf, output_3mf, plate_name):
    """
    Modify the project name and description in 3D/3dmodel.model to the plate name.
    Copies all files to the output .3mf without modifying plate data.
    
    Args:
        input_3mf (str): Path to the input .3mf file
        output_3mf (str): Path to save the modified .3mf file
        plate_name (str): Plate name to set as project title and description
    """
    # Create a temporary directory for extraction
    temp_dir = "temp_3mf_extract"
    os.makedirs(temp_dir, exist_ok=True)
    
    try:
        # Step 1: Unzip the .3mf file
        with zipfile.ZipFile(input_3mf, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        
        # Step 2: Process 3dmodel.model
        model_file = os.path.join(temp_dir, '3D', '3dmodel.model')
        metadata_modified = False
        
        if os.path.exists(model_file):
            try:
                tree = ET.parse(model_file)
                xml_root = tree.getroot()
                ns = {'3mf': 'http://schemas.microsoft.com/3dmanufacturing/core/2015/02'}
                ET.register_namespace('', 'http://schemas.microsoft.com/3dmanufacturing/core/2015/02')
                ET.register_namespace('p', 'http://schemas.microsoft.com/3dmanufacturing/production/2015/06')
                
                # Modify or add project Title metadata
                title_meta = None
                for meta in xml_root.findall(".//3mf:metadata", namespaces=ns):
                    if meta.get('name') == 'Title':
                        title_meta = meta
                        break
                if title_meta is not None:
                    title_meta.text = plate_name
                    metadata_modified = True
                else:
                    meta_elem = ET.SubElement(xml_root, '{http://schemas.microsoft.com/3dmanufacturing/core/2015/02}metadata')
                    meta_elem.set('name', 'Title')
                    meta_elem.text = plate_name
                    metadata_modified = True
                print(f"Updated project name to: {plate_name}")
                
                # Modify or add project Description metadata
                desc_meta = None
                for meta in xml_root.findall(".//3mf:metadata", namespaces=ns):
                    if meta.get('name') == 'Description':
                        desc_meta = meta
                        break
                if desc_meta is not None:
                    desc_meta.text = plate_name
                    metadata_modified = True
                else:
                    meta_elem = ET.SubElement(xml_root, '{http://schemas.microsoft.com/3dmanufacturing/core/2015/02}metadata')
                    meta_elem.set('name', 'Description')
                    meta_elem.text = plate_name
                    metadata_modified = True
                print(f"Updated project description to: {plate_name}")
                
                # Save the modified XML
                tree.write(model_file, encoding='utf-8', xml_declaration=True)
                print(f"Modified metadata in {model_file}")
            except ET.ParseError:
                print(f"Error: Invalid XML in {model_file}")
                return False
            except Exception as e:
                print(f"Error processing {model_file}: {e}")
                return False
        else:
            print(f"Error: {model_file} not found in .3mf archive")
            return False
        
        if not metadata_modified:
            print("Warning: No metadata fields were modified.")
        
        # Step 3: Create a new .3mf file, copying all files
        with zipfile.ZipFile(output_3mf, 'w', zipfile.ZIP_DEFLATED) as zip_ref:
            for root, _, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, temp_dir)
                    zip_ref.write(file_path, arcname)
                    print(f"Added {arcname} to {output_3mf}")
        
        print(f"Successfully created new .3mf file: {output_3mf}")
        return True
    
    finally:
        # Clean up temporary directory
        shutil.rmtree(temp_dir, ignore_errors=True)

def main(input_3mf):
    """
    Generate one .3mf file per plate, setting title and description to the plater_name.
    
    Args:
        input_3mf (str): Path to the input .3mf file
    """
    # Extract plate names
    temp_dir = "temp_3mf_extract"
    os.makedirs(temp_dir, exist_ok=True)
    
    try:
        with zipfile.ZipFile(input_3mf, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        
        # Extract plate names from model_settings.config
        config_file = os.path.join(temp_dir, 'Metadata', 'model_settings.config')
        if not os.path.exists(config_file):
            print(f"Error: {config_file} not found in .3mf archive")
            return
        
        plate_names = extract_plate_names(config_file)
        if not plate_names:
            print("Error: No valid plater_name entries found in model_settings.config")
            return
        
        print(f"Found {len(plate_names)} plates: {plate_names}")
        
        # Generate one .3mf file per plate
        input_filename = Path(input_3mf).stem  # Get filename without extension
        for plate_name in plate_names:
            # Sanitize plate name for filename (replace invalid characters)
            safe_plate_name = plate_name.replace('/', '_').replace('\\', '_').replace(':', '_')
            output_3mf = f"{input_filename} - {safe_plate_name}.3mf"
            print(f"Generating {output_3mf} with title and description: {plate_name}")
            modify_3mf_metadata(input_3mf, output_3mf, plate_name)
    
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

# Command-line interface
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python gen_3mf_plates.py <input.3mf>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    if not os.path.exists(input_file):
        print(f"Error: Input file {input_file} does not exist")
        sys.exit(1)
    
    main(input_file)
